name: Update Profile SVG

on:
  schedule:
    - cron: "0 */8 * * *"
  workflow_dispatch:

jobs:
  update_svg:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch GitHub Stats
        id: fetch_stats
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ github.repository_owner }}
        run: |
          validate_json() {
            if ! echo "$1" | jq -e . > /dev/null; then
              echo "::error::API call failed or did not return valid JSON. The workflow cannot continue."
              echo "Response was: $1"
              exit 1
            fi
          }
          GH_REPO_DATA=$(gh repo list "$USERNAME" --limit 1000 --json isFork,stargazerCount)
          validate_json "$GH_REPO_DATA"
          NUM_REPOS=$(echo "$GH_REPO_DATA" | jq '[.[] | select(.isFork | not)] | length')
          NUM_STARS=$(echo "$GH_REPO_DATA" | jq '[.[].stargazerCount] | add')
          COMMIT_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.cloak-preview" "https://api.github.com/search/commits?q=author:$USERNAME")
          validate_json "$COMMIT_DATA"
          COMMIT_COUNT=$(echo "$COMMIT_DATA" | jq '.total_count')
          PR_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/search/issues?q=is:pr+author:$USERNAME")
          validate_json "$PR_DATA"
          PR_COUNT=$(echo "$PR_DATA" | jq '.total_count')
          LANG_DATA=$(gh repo list "$USERNAME" --limit 100 --json languages)
          validate_json "$LANG_DATA"
          LANG_LIST=$(echo "$LANG_DATA" | jq -r '
            (reduce (.[].languages[] | select(.size > 0)) as $lang ({}; .[$lang.node.name] += $lang.size)) as $totals_by_lang |
            ($totals_by_lang | map(.) | add) as $grand_total |
            $totals_by_lang |
            to_entries |
            map({lang: .key, size: .value}) |
            sort_by(.size) |
            reverse |
            .[0:5] |
            map("\(.lang) (\(.size * 100 / $grand_total | floor)%)") |
            join(", ")
          ')
          if [ -z "$LANG_LIST" ]; then
            LANG_LIST="Not enough data yet"
          fi

          X_COL1_LABEL="10"
          X_COL1_VALUE="170"

          X_COL2_LABEL="300"
          X_COL2_VALUE="450"

          SVG_TEXT_BLOCK="<tspan x='${X_COL1_LABEL}' dy='0'>Number of repos:</tspan>"
          SVG_TEXT_BLOCK="${SVG_TEXT_BLOCK}<tspan x='${X_COL1_VALUE}'>${NUM_REPOS}</tspan>"
          SVG_TEXT_BLOCK="${SVG_TEXT_BLOCK}<tspan x='${X_COL2_LABEL}'>Number of stars:</tspan>"
          SVG_TEXT_BLOCK="${SVG_TEXT_BLOCK}<tspan x='${X_COL2_VALUE}'>${NUM_STARS}</tspan>"

          SVG_TEXT_BLOCK="${SVG_TEXT_BLOCK}<tspan x='${X_COL1_LABEL}' dy='1.2em'>Number of commits:</tspan>"
          SVG_TEXT_BLOCK="${SVG_TEXT_BLOCK}<tspan x='${X_COL1_VALUE}'>${COMMIT_COUNT}</tspan>"
          SVG_TEXT_BLOCK="${SVG_TEXT_BLOCK}<tspan x='${X_COL2_LABEL}'>Number of PRs:</tspan>"
          SVG_TEXT_BLOCK="${SVG_TEXT_BLOCK}<tspan x='${X_COL2_VALUE}'>${PR_COUNT}</tspan>"

          SVG_TEXT_BLOCK="${SVG_TEXT_BLOCK}<tspan x='${X_COL1_LABEL}' dy='1.2em'>Most used languages:</tspan>"
          SVG_TEXT_BLOCK="${SVG_TEXT_BLOCK}<tspan x='${X_COL1_VALUE}'>${LANG_LIST}</tspan>"

          echo "STATS_BLOCK<<EOF" >> $GITHUB_OUTPUT
          echo "$SVG_TEXT_BLOCK" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update SVG template
        run: |
          sed "s#{github_stats}#${{ steps.fetch_stats.outputs.STATS_BLOCK }}#g" ./res/arch_profile_template.svg > ./res/arch_profile_current.svg

      - name: Commit and Push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore(docs): update profile stats SVG"
          file_pattern: ./res/arch_profile_current.svg
